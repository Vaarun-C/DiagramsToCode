Parameters:
  EnvironmentNameFor$$1:
    Description: An environment name that is prefixed to resource names for $$1
    Type: String
    Default: $$1

Resources:
  $$1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentNameFor$$1}-BedrockAccessRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - bedrock.amazonaws.com
            Action: 'sts:AssumeRole'
      
      Policies:
        - PolicyName: BedrockFullAccessFor$$1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                  - 'bedrock:ListFoundationModels'
                  - 'bedrock:GetFoundationModel'
                  - 'bedrock:ListCustomModels'
                  - 'bedrock:CreateModelCopyJob'
                  - 'bedrock:CreateProvisionedModelThroughput'
                  - 'bedrock:ListProvisionedModelThroughputs'
                  - 'bedrock:CreateGuardrail'
                  - 'bedrock:ListGuardrails'
                Resource: '*'

Outputs:
  BedrockAccessRoleArnFor$$1:
    Description: ARN of the Bedrock Access Role for $$1
    Value: !GetAtt $$1.Arn
    Export:
      Name: !Sub '${EnvironmentNameFor$$1}-BedrockAccessRoleArn'

Disclaimers:
["Some Bedrock configurations must be done manually", "Model selection and enablement often require direct AWS Console interaction"]