{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template for recognized AWS services",
    "Resources": {
        "S3BucketIngestion": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": "data-ingestion-bucket"
            }
        },
        "S3BucketPresentation": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": "data-presentation-bucket"
            }
        },
        "CloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Enabled": true,
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "S3BucketPresentation",
                                    "DomainName"
                                ]
                            },
                            "Id": "S3PresentationOrigin"
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "TargetOriginId": "S3PresentationOrigin",
                        "ViewerProtocolPolicy": "redirect-to-https"
                    }
                }
            }
        },
        "KinesisStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
                "Name": "InboundStream",
                "ShardCount": 1
            }
        },
        "LambdaFunctionIngestion": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "python3.9",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "def handler(event, context):\n    print('Ingestion Lambda triggered')"
                }
            }
        },
        "LambdaFunctionQuery": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Runtime": "python3.9",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "def handler(event, context):\n    print('Query Lambda triggered')"
                }
            }
        },
        "DynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": "DataQueryStorage",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "Id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "Id",
                        "KeyType": "HASH"
                    }
                ],
                "BillingMode": "PAY_PER_REQUEST"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            }
        }
    }
}