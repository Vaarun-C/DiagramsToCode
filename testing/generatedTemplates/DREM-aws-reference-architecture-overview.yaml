AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for DREM-aws-reference-architecture-overview.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]










Parameters: 
  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DynamoDBTableNameForMyTable1:
    Type: String
    Default: "MyTable1"
    Description: "The name of the DynamoDB table for MyTable1."

  EventBusNameForMyEventBus1:
    Type: String
    Default: "MyEventBus1"
    Description: "Name of the EventBridge Event Bus for MyEventBus1"

  GraphQLApiNameForMyGraphQLApi1:
    Type: String
    Default: "MyGraphQLApi1"
    Description: "The name of the AppSync GraphQL API for MyGraphQLApi1."



  ApiKeyExpiryForMyApiKey1:
    Type: Number
    Description: "Unix timestamp when the API key should expire for MyApiKey1."
    Default: 1700889600


  RuleNameForMyRule1:
    Type: String
    Default: "MyRule1"
    Description: "Name of the EventBridge Rule for MyRule1"



Resources: 
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyTable1:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableNameForMyTable1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  MyEventBus1:
    Type: "AWS::Events::EventBus"
    Properties:
      Name: !Ref EventBusNameForMyEventBus1
      Tags:
        - Key: "Environment"
          Value: "Development"

  MyGraphQLApi1:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref GraphQLApiNameForMyGraphQLApi1
      AuthenticationType: API_KEY
      XrayEnabled: true

  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyRoleForAppSyncService1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AppSyncDynamoDBAccessForMyRoleForAppSyncService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt MyTable1.Arn

  MyGraphQLSchema1:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Definition: |
        type Query {
          getItem(id: ID!): Item
        }
        type Mutation {
          putItem(id: ID!, name: String!): Item
        }
        type Item {
          id: ID!
          name: String
        }
        schema {
          query: Query
          mutation: Mutation
        }

  MyApiKey1:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Expires: !Ref ApiKeyExpiryForMyApiKey1

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyDataSource1:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Name: "MyDataSource1"
      Type: "AMAZON_DYNAMODB"
      DynamoDBConfig:
        TableName: !Ref MyTable1
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt MyRoleForAppSyncService1.Arn

  MyRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Ref RuleNameForMyRule1
      Description: "Rule to trigger Lambda on specific event patterns for MyRule1"
      EventBusName: !Ref MyEventBus1
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "PutObject"
          resources:
            - !Sub "arn:aws:s3:::${MyBucket1}"
      State: "ENABLED"
      Targets:
        - Id: "LambdaTarget"
          Arn: !GetAtt MyFunction1.Arn

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyGetResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "getItem"
      TypeName: "Query"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyPutResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "putItem"
      TypeName: "Mutation"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

Outputs: 
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn

  EventBusArnForMyEventBus1:
    Description: "ARN of the Event Bus for MyEventBus1"
    Value: !GetAtt MyEventBus1.Arn
    Export:
      Name: "EventBusArn"
  GraphQLApiUrlForMyGraphQLApi1:
    Description: "The URL endpoint of the AppSync GraphQL API for MyGraphQLApi1"
    Value: !GetAtt MyGraphQLApi1.GraphQLUrl
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"


  ApiKeyForMyApiKey1:
    Description: "The API key for accessing the AppSync API for MyApiKey1"
    Value: !Ref MyApiKey1

  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn




