AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 2-real-time-ml-forecasting.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]

  VersioningEnabledForMyBucket2: !Equals [!Ref EnableVersioningForMyBucket2, true]
  VersioningEnabledForMyBucket3: !Equals [!Ref EnableVersioningForMyBucket3, true]


  VersioningEnabledForMyBucket4: !Equals [!Ref EnableVersioningForMyBucket4, true]














Parameters: 
  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DatabaseNameForMyDatabase1:
    Type: String
    Default: MyDatabase1
    Description: Name of the Glue database for MyDatabase1

  BucketNameForMyBucket2:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket2:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket3:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket3:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  NotebookInstanceNameForMyNotebookInstance1:
    Type: String
    Default: "MyNotebookInstance1"
    Description: "The name of the SageMaker Notebook Instance for MyNotebookInstance1."
  NotebookInstanceTypeForMyNotebookInstance1:
    Type: String
    Default: "ml.t2.medium"
    AllowedValues:
      - "ml.t2.medium"
      - "ml.m5.large"
      - "ml.m5.xlarge"
      - "ml.c5.large"
      - "ml.c5.xlarge"
    Description: "The instance type for the SageMaker Notebook Instance for MyNotebookInstance1."
  RootAccessForMyNotebookInstance1:
    Type: String
    Default: "Disabled"
    AllowedValues:
      - "Enabled"
      - "Disabled"
    Description: "Whether the SageMaker Notebook Instance has root access for MyNotebookInstance1."

  HostedZoneIdForMyRecordSet1:
    Type: String
    Description: The Route 53 Hosted Zone ID for your domain for MyRecordSet1

  BucketNameForMyBucket4:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket4:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DatabaseNameForMyDatabase2:
    Type: String
    Default: MyDatabase2
    Description: Name of the Glue database for MyDatabase2


  KendraIndexNameForMyIndex1:
    Type: String
    Default: "MyIndex1"
    Description: "The name of the Amazon Kendra index for MyIndex1."

  CrawlerScheduleForMyCrawler1:
    Type: String
    Default: "cron(0 12 * * ? *)"
    Description: Cron expression for crawler schedule for MyCrawler1

  JobTimeoutForMyJob1:
    Type: Number
    Default: 2880
    Description: Job timeout in minutes for MyJob1

  CrawlerScheduleForMyCrawler2:
    Type: String
    Default: "cron(0 12 * * ? *)"
    Description: Cron expression for crawler schedule for MyCrawler2

  JobTimeoutForMyJob2:
    Type: Number
    Default: 2880
    Description: Job timeout in minutes for MyJob2



  ExecutionRoleNameForMyRoleForSageMakerExecution1:
    Type: String
    Default: "MyRoleForSageMakerExecution1"
    Description: "The name of the IAM role for the SageMaker Notebook Instance for MyRoleForSageMakerExecution1."

  DomainNameForMyDomainName1:
    Type: String
    Description: The domain name to use for the API for MyDomainName1




Resources: 
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyDatabase1:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Ref DatabaseNameForMyDatabase1
        Description: "Glue database for storing table metadata for MyDatabase1."

  MyBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket2
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket2 
          - Enabled 
          - Suspended
  MyBucket3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket3
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket3 
          - Enabled 
          - Suspended
  MyNotebookInstance1:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Ref NotebookInstanceNameForMyNotebookInstance1
      InstanceType: !Ref NotebookInstanceTypeForMyNotebookInstance1
      RoleArn: !GetAtt MyRoleForSageMakerExecution1.Arn
      RootAccess: !Ref RootAccessForMyNotebookInstance1
      VolumeSizeInGB: 10 # Adjust the volume size as needed
      DirectInternetAccess: "Enabled"

  MyRecordSet1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneIdForMyRecordSet1
      Name: !Ref DomainNameForMyDomainName1
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyDomainName1.RegionalDomainName
        HostedZoneId: !GetAtt MyDomainName1.RegionalHostedZoneId

  MyBucket4:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket4
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket4 
          - Enabled 
          - Suspended
  MyDatabase2:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Ref DatabaseNameForMyDatabase2
        Description: "Glue database for storing table metadata for MyDatabase2."

  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyIndex1:
    Type: AWS::Kendra::Index
    Properties:
      Name: !Ref KendraIndexNameForMyIndex1
      Edition: ENTERPRISE_EDITION
      RoleArn: !GetAtt MyRoleForKendraExecution1.Arn

  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyCrawler1:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt MyRoleForGlueService1.Arn
      DatabaseName: !Ref MyDatabase1
      Name: !Sub "${DatabaseNameForMyDatabase1}-crawler"
      Description: "Crawler to populate the Glue database."
      Targets:
        S3Targets:
          - Path: !Sub "s3://${MyBucket1}/data/"
      Schedule: 
        ScheduleExpression: !Ref CrawlerScheduleForMyCrawler1

  MyJob1:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt MyBucket1.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${MyBucket1}/scripts/MyJob1-script.py"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${MyBucket1}/temp/"
        "--job-bookmark-option": "job-bookmark-enable"
      MaxRetries: 1
      Timeout: !Ref JobTimeoutForMyJob1

  MyBucketPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket2.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy3:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket3.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy4:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket4
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket4.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyCrawler2:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt MyRoleForGlueService1.Arn
      DatabaseName: !Ref MyDatabase2
      Name: !Sub "${DatabaseNameForMyDatabase2}-crawler"
      Description: "Crawler to populate the Glue database."
      Targets:
        S3Targets:
          - Path: !Sub "s3://${MyBucket2}/data/"
      Schedule: 
        ScheduleExpression: !Ref CrawlerScheduleForMyCrawler2

  MyJob2:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt MyBucket2.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${MyBucket2}/scripts/MyJob2-script.py"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${MyBucket2}/temp/"
        "--job-bookmark-option": "job-bookmark-enable"
      MaxRetries: 1
      Timeout: !Ref JobTimeoutForMyJob2

  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyDataSource1:
    Type: AWS::Kendra::DataSource
    Properties:
      Name: "S3DataSourceForMyDataSource1"
      IndexId: !Ref MyIndex1
      Type: S3
      DataSourceConfiguration:
        S3Configuration:
          BucketName: !Ref MyBucket1
      RoleArn: !GetAtt MyRoleForKendraExecution1.Arn
      Schedule: "cron(0 12 * * ? *)" # Optional: Daily sync at 12:00 UTC

  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyRoleForSageMakerExecution1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ExecutionRoleNameForMyRoleForSageMakerExecution1
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "SageMakerNotebookPolicyForMyRoleForSageMakerExecution1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sagemaker:*
                Resource: "*"

  MyDomainName1:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      RegionalCertificateArn: !Ref MyCertificate1
      EndpointConfiguration:
        Types:
          - REGIONAL

  MyRoleForKendraExecution1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "KendraDataSourceAccessPolicyForMyRoleForKendraExecution1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${MyBucket1}"
                  - !Sub "arn:aws:s3:::${MyBucket1}/*"

  MyRoleForGlueService1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "glue.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GlueServicePolicyForMyRoleForGlueService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource: 
                  - !Sub "arn:aws:s3:::${MyBucket1}"
                  - !Sub "arn:aws:s3:::${MyBucket1}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  MyCertificate1:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      ValidationMethod: DNS

Outputs: 
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  GlueDatabaseName:
    Description: "The name of the Glue database for MyDatabase1"
    Value: !Ref MyDatabase1
  S3BucketNameForMyBucket2:
    Description: The name of the created S3 bucket for MyBucket2
    Value: !Ref MyBucket2
  S3BucketArnForMyBucket2:
    Description: The ARN of the created S3 bucket for MyBucket2
    Value: !GetAtt MyBucket2.Arn
  S3BucketNameForMyBucket3:
    Description: The name of the created S3 bucket for MyBucket3
    Value: !Ref MyBucket3
  S3BucketArnForMyBucket3:
    Description: The ARN of the created S3 bucket for MyBucket3
    Value: !GetAtt MyBucket3.Arn
  NotebookInstanceNameForMyNotebookInstance1:
    Description: "The name of the SageMaker Notebook Instance for MyNotebookInstance1."
    Value: !Ref MyNotebookInstance1
  NotebookInstanceUrlForMyNotebookInstance1:
    Description: "The URL to access the SageMaker Notebook Instance."
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstanceNameForMyNotebookInstance1}"


  S3BucketNameForMyBucket4:
    Description: The name of the created S3 bucket for MyBucket4
    Value: !Ref MyBucket4
  S3BucketArnForMyBucket4:
    Description: The ARN of the created S3 bucket for MyBucket4
    Value: !GetAtt MyBucket4.Arn
  GlueDatabaseName:
    Description: "The name of the Glue database for MyDatabase2"
    Value: !Ref MyDatabase2
  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  KendraIndexIdForMyIndex1:
    Description: "The ID of the Kendra index for MyIndex1."
    Value: !Ref MyIndex1

  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
  GlueCrawlerNameForMyCrawler1:
    Description: "The name of the Glue crawler for MyCrawler1"
    Value: !Ref MyCrawler1

  GlueJobNameForMyJob1:
    Description: "The name of the Glue job for MyJob1"
    Value: !Ref MyJob1

  GlueCrawlerNameForMyCrawler2:
    Description: "The name of the Glue crawler for MyCrawler2"
    Value: !Ref MyCrawler2

  GlueJobNameForMyJob2:
    Description: "The name of the Glue job for MyJob2"
    Value: !Ref MyJob2



  ExecutionRoleArnForMyRoleForSageMakerExecution1:
    Description: "The ARN of the SageMaker Notebook execution role for MyRoleForSageMakerExecution1."
    Value: !GetAtt MyRoleForSageMakerExecution1.Arn

  KendraExecutionRoleArnForMyRoleForKendraExecution1:
    Description: "The ARN of the IAM role used by Kendra."
    Value: !GetAtt MyRoleForKendraExecution1.Arn



