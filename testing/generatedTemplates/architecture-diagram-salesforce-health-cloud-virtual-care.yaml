AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for architecture-diagram-salesforce-health-cloud-virtual-care.png
Conditions: 



  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]
  HasEmailSubscriptionForMySubscription1: !Not [!Equals [!Ref EmailAddressForMySubscription1, ""]]


Parameters: 

  EventBusNameForMyEventBus1:
    Type: String
    Default: "MyEventBus1"
    Description: "Name of the EventBridge Event Bus for MyEventBus1"

  TopicNameForMyTopic1:
    Type: String
    Default: "MyTopic1Topic"
    Description: "The name of the SNS topic for MyTopic1."
  DisplayNameForMyTopic1:
    Type: String
    Default: "MyTopic1DisplayName"
    Description: "The display name for the SNS topic for MyTopic1."

  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  EmailAddressForMySubscription1:
    Type: String
    Default: ""
    Description: "The email address to subscribe to the topic for MySubscription1. Leave blank if no email subscription is required."

  RuleNameForMyRule1:
    Type: String
    Default: "MyRule1"
    Description: "Name of the EventBridge Rule for MyRule1"

Resources: 
  MyKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for CloudTrail log encryption for MyKey1'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'

  MyEventBus1:
    Type: "AWS::Events::EventBus"
    Properties:
      Name: !Ref EventBusNameForMyEventBus1
      Tags:
        - Key: "Environment"
          Value: "Development"

  MyTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref TopicNameForMyTopic1
      DisplayName: !Ref DisplayNameForMyTopic1

  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MySubscription1:
    Type: "AWS::SNS::Subscription"
    Condition: HasEmailSubscriptionForMySubscription1
    Properties:
      Protocol: "email"
      Endpoint: !Ref EmailAddressForMySubscription1
      TopicArn: !Ref MyTopic1

  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Ref RuleNameForMyRule1
      Description: "Rule to trigger Lambda on specific event patterns for MyRule1"
      EventBusName: !Ref MyEventBus1
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "PutObject"
          resources:
            - !Sub "arn:aws:s3:::${MyBucket1}"
      State: "ENABLED"
      Targets:
        - Id: "LambdaTarget"
          Arn: !GetAtt MyFunction1.Arn

Outputs: 
  CloudTrailKMSKeyArnForMyKey1:
    Description: 'The ARN of the KMS key used for encrypting CloudTrail logs for MyKey1'
    Value: !GetAtt MyKey1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'
  EventBusArnForMyEventBus1:
    Description: "ARN of the Event Bus for MyEventBus1"
    Value: !GetAtt MyEventBus1.Arn
    Export:
      Name: "EventBusArn"
  TopicArnForMyTopic1:
    Description: "The ARN of the SNS topic for MyTopic1."
    Value: !Ref MyTopic1
  TopicNameOutputForMyTopic1:
    Description: "The name of the SNS topic for MyTopic1."
    Value: !Ref TopicNameForMyTopic1
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn

  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn

