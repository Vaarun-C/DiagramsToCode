AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 2-gather-process-analyze-data.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]
  VersioningEnabledForMyBucket2: !Equals [!Ref EnableVersioningForMyBucket2, true]





  VersioningEnabledForMyBucket3: !Equals [!Ref EnableVersioningForMyBucket3, true]














Parameters: 
  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket2:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket2:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DynamoDBTableNameForMyTable1:
    Type: String
    Default: "MyTable1"
    Description: "The name of the DynamoDB table for MyTable1."

  GraphQLApiNameForMyGraphQLApi1:
    Type: String
    Default: "MyGraphQLApi1"
    Description: "The name of the AppSync GraphQL API for MyGraphQLApi1."

  HostedZoneIdForMyRecordSet1:
    Type: String
    Description: The Route 53 Hosted Zone ID for your domain for MyRecordSet1


  GraphQLApiNameForMyGraphQLApi2:
    Type: String
    Default: "MyGraphQLApi2"
    Description: "The name of the AppSync GraphQL API for MyGraphQLApi2."

  BucketNameForMyBucket3:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket3:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  ClusterNameForMyCluster1:
    Type: String
    Default: "MyCluster1"
    Description: "The name of the MSK cluster for MyCluster1."
  BrokerInstanceTypeForMyCluster1:
    Type: String
    Default: "kafka.m5.large"
    Description: "The instance type for the Kafka brokers for MyCluster1."
  NumberOfBrokerNodesForMyCluster1:
    Type: Number
    Default: 3
    Description: "The number of broker nodes in the cluster for MyCluster1."


  ApiKeyExpiryForMyApiKey1:
    Type: Number
    Description: "Unix timestamp when the API key should expire for MyApiKey1."
    Default: 1700889600





  ApiKeyExpiryForMyApiKey2:
    Type: Number
    Description: "Unix timestamp when the API key should expire for MyApiKey2."
    Default: 1700889600



  DomainNameForMyDomainName1:
    Type: String
    Description: The domain name to use for the API for MyDomainName1

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ



  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.

Resources: 
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket2
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket2 
          - Enabled 
          - Suspended
  MyTable1:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableNameForMyTable1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  MyGraphQLApi1:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref GraphQLApiNameForMyGraphQLApi1
      AuthenticationType: API_KEY
      XrayEnabled: true

  MyRecordSet1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneIdForMyRecordSet1
      Name: !Ref DomainNameForMyDomainName1
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyDomainName1.RegionalDomainName
        HostedZoneId: !GetAtt MyDomainName1.RegionalHostedZoneId

  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyGraphQLApi2:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref GraphQLApiNameForMyGraphQLApi2
      AuthenticationType: API_KEY
      XrayEnabled: true

  MyBucket3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket3
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket3 
          - Enabled 
          - Suspended
  MyFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction2
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyCluster1:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Ref ClusterNameForMyCluster1
      KafkaVersion: "3.4.0" # Choose a supported Kafka version
      NumberOfBrokerNodes: !Ref NumberOfBrokerNodesForMyCluster1
      BrokerNodeGroupInfo:
        BrokerAZDistribution: "DEFAULT"
        ClientSubnets: !Ref MySubnet1
        InstanceType: !Ref BrokerInstanceTypeForMyCluster1
      EncryptionInfo:
        EncryptionAtRest:
          DataVolumeKMSKeyId: "alias/aws/kafka" # Default AWS-managed KMS key
        EncryptionInTransit:
          ClientBroker: "TLS"
          InCluster: true
      LoggingInfo:
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Sub "/aws/msk/${ClusterNameForMyCluster1}"
          S3:
            Enabled: false
          Firehose:
            Enabled: false

  MyFunction3:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction3
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket2.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyGraphQLSchema1:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Definition: |
        type Query {
          getItem(id: ID!): Item
        }
        type Mutation {
          putItem(id: ID!, name: String!): Item
        }
        type Item {
          id: ID!
          name: String
        }
        schema {
          query: Query
          mutation: Mutation
        }

  MyApiKey1:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Expires: !Ref ApiKeyExpiryForMyApiKey1

  MyGetResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "getItem"
      TypeName: "Query"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyPutResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "putItem"
      TypeName: "Mutation"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyGraphQLSchema2:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyGraphQLApi2.ApiId
      Definition: |
        type Query {
          getItem(id: ID!): Item
        }
        type Mutation {
          putItem(id: ID!, name: String!): Item
        }
        type Item {
          id: ID!
          name: String
        }
        schema {
          query: Query
          mutation: Mutation
        }

  MyApiKey2:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MyGraphQLApi2.ApiId
      Expires: !Ref ApiKeyExpiryForMyApiKey2

  MyGetResolver2:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi2.ApiId
      FieldName: "getItem"
      TypeName: "Query"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyPutResolver2:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi2.ApiId
      FieldName: "putItem"
      TypeName: "Mutation"
      DataSourceName: !Ref MyDataSource2
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyBucketPolicy3:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket3.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyMethodForLambda2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource2
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction2.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction2
      Principal: apigateway.amazonaws.com
  MyResource3:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyMethodForLambda3:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource3
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction3.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction3
      Principal: apigateway.amazonaws.com
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyDomainName1:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      RegionalCertificateArn: !Ref MyCertificate1
      EndpointConfiguration:
        Types:
          - REGIONAL

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyDataSource1:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Name: "MyDataSource1"
      Type: "AMAZON_DYNAMODB"
      DynamoDBConfig:
        TableName: !Ref MyTable1
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt MyRoleForAppSyncService1.Arn

  MyDataSource2:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyGraphQLApi2.ApiId
      Name: "MyDataSource2"
      Type: "AMAZON_DYNAMODB"
      DynamoDBConfig:
        TableName: !Ref MyTable1
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt MyRoleForAppSyncService1.Arn

  MyCertificate1:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      ValidationMethod: DNS

  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyRoleForAppSyncService1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AppSyncDynamoDBAccessForMyRoleForAppSyncService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt MyTable1.Arn

Outputs: 
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  S3BucketNameForMyBucket2:
    Description: The name of the created S3 bucket for MyBucket2
    Value: !Ref MyBucket2
  S3BucketArnForMyBucket2:
    Description: The ARN of the created S3 bucket for MyBucket2
    Value: !GetAtt MyBucket2.Arn

  GraphQLApiUrlForMyGraphQLApi1:
    Description: "The URL endpoint of the AppSync GraphQL API for MyGraphQLApi1"
    Value: !GetAtt MyGraphQLApi1.GraphQLUrl

  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  GraphQLApiUrlForMyGraphQLApi2:
    Description: "The URL endpoint of the AppSync GraphQL API for MyGraphQLApi2"
    Value: !GetAtt MyGraphQLApi2.GraphQLUrl
  S3BucketNameForMyBucket3:
    Description: The name of the created S3 bucket for MyBucket3
    Value: !Ref MyBucket3
  S3BucketArnForMyBucket3:
    Description: The ARN of the created S3 bucket for MyBucket3
    Value: !GetAtt MyBucket3.Arn
  LambdaFunctionArnForMyFunction2:
    Description: The ARN of the Lambda function for MyFunction2
    Value: !GetAtt MyFunction2.Arn
  ClusterArnForMyCluster1:
    Description: "The ARN of the MSK Cluster for MyCluster1"
    Value: !GetAtt MyCluster1.Arn

  LambdaFunctionArnForMyFunction3:
    Description: The ARN of the Lambda function for MyFunction3
    Value: !GetAtt MyFunction3.Arn
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"

  ApiKeyForMyApiKey1:
    Description: "The API key for accessing the AppSync API for MyApiKey1"
    Value: !Ref MyApiKey1





  ApiKeyForMyApiKey2:
    Description: "The API key for accessing the AppSync API for MyApiKey2"
    Value: !Ref MyApiKey2




  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1



  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1

