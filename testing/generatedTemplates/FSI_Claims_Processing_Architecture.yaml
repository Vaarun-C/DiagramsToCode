AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for FSI_Claims_Processing_Architecture.png
Conditions: 








Parameters: 
  ClusterNameForMyFargateCluster1:
    Description: The name of the ECS cluster
    Type: String
    Default: MyFargateCluster1
  QueueNameForMyQueue1:
    Type: String
    Default: "MyQueue1"
    Description: "The name of the SQS queue for MyQueue1."
  VisibilityTimeoutForMyQueue1:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 43200
    Description: "The visibility timeout for the queue in seconds for MyQueue1."
  MessageRetentionPeriodForMyQueue1:
    Type: Number
    Default: 345600  # 4 days
    MinValue: 60
    MaxValue: 1209600  # 14 days
    Description: "The number of seconds for which Amazon SQS retains a message for MyQueue1."

  ContainerImageForMyTaskDefinitionFargate1:
    Type: String
    Description: Docker image for the container for MyTaskDefinitionFargate1
    Default: nginx:latest
  ContainerPortForMyTaskDefinitionFargate1:
    Type: Number
    Description: Port exposed by the container for MyTaskDefinitionFargate1
    Default: 80


  ClusterNameForMyCluster1:
    Description: The name of the ECS cluster
    Type: String
    Default: MyCluster1
  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.

  BotNameForMyBot1:
    Type: String
    Default: "MyBot1"
    Description: "The name of the Amazon Lex bot for MyBot1."
  LocaleForMyBot1:
    Type: String
    Default: "en_US"
    AllowedValues: 
      - en_US
      - en_GB
      - de_DE
      - es_US
      - fr_FR
    Description: "The locale for the Lex Bot (e.g., en_US for US English) for MyBot1."

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ

  BotAliasNameForMyBotAlias1:
    Type: String
    Default: "MyBotAlias1"
    Description: "The alias name for the Amazon Lex bot for MyBotAlias1."

  DomainNameForMyDomain1:
    Type: String
    Default: "MyDomain1"
    Description: "The name of the OpenSearch domain for MyDomain1."
  InstanceTypeForMyDomain1:
    Type: String
    Default: "m6g.large.search"
    Description: "The instance type for the data nodes in the OpenSearch cluster for MyDomain1."
  InstanceCountForMyDomain1:
    Type: Number
    Default: 2
    Description: "The number of data nodes in the OpenSearch cluster for MyDomain1."
  MasterInstanceTypeForMyDomain1:
    Type: String
    Default: "m6g.medium.search"
    Description: "The instance type for the dedicated master nodes for MyDomain1."
  MasterInstanceCountForMyDomain1:
    Type: Number
    Default: 3
    Description: "The number of dedicated master nodes in the OpenSearch cluster for MyDomain1."
  VolumeSizeForMyDomain1:
    Type: Number
    Default: 10
    Description: "The size (in GB) of the EBS volumes attached to each data node for MyDomain1."


Resources: 
  MyFargateCluster1:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterNameForMyFargateCluster1
  MyQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueNameForMyQueue1
      VisibilityTimeout: !Ref VisibilityTimeoutForMyQueue1
      MessageRetentionPeriod: !Ref MessageRetentionPeriodForMyQueue1

  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyTaskDefinitionFargate1:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fargate-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: fargate-app-MyTaskDefinitionFargate1
          Image: !Ref ContainerImageForMyTaskDefinitionFargate1
          PortMappings:
            - ContainerPort: !Ref ContainerPortForMyTaskDefinitionFargate1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyRoleForLexExecution1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lex.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "LexBasicPolicyForMyRoleForLexExecution1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  MyCluster1:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterNameForMyCluster1
  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyResource3:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction2
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyFunction3:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction3
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyBot1:
    Type: AWS::Lex::Bot
    Properties:
      Name: !Ref BotNameForMyBot1
      RoleArn: !GetAtt MyRoleForLexExecution1.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: !Ref LocaleForMyBot1
          Description: !Sub "Sample bot for ${LocaleForMyBot1}"
          VoiceSettings:
            VoiceId: "Joanna"
          NluConfidenceThreshold: 0.8
          Intents:
            - Name: "SampleIntent"
              SampleUtterances:
                - Utterance: "What is the weather like in {Location}?"
                - Utterance: "Tell me the forecast for {Location}"
              Slots:
                - Name: "Location"
                  SlotTypeName: "AMAZON.City"
                  ValueElicitationSetting:
                    SlotConstraint: Required
                    PromptSpecification:
                      MaxRetries: 2
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Which city are you asking about?"

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyMethodForLambda2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource2
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction2.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction2
      Principal: apigateway.amazonaws.com
  MyMethodForLambda3:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource3
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction3.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction3
      Principal: apigateway.amazonaws.com
  LexBotAliasForMyBotAlias1:
    Type: AWS::Lex::BotAlias
    Properties:
      BotAliasName: !Ref BotAliasNameForMyBotAlias1
      BotId: !Ref MyBot1
      BotVersion: DRAFT

  MyDomain1:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Ref DomainNameForMyDomain1
      EngineVersion: "OpenSearch_2.9"
      ClusterConfig:
        InstanceType: !Ref InstanceTypeForMyDomain1
        InstanceCount: !Ref InstanceCountForMyDomain1
        DedicatedMasterEnabled: true
        ZoneAwarenessEnabled: true
        DedicatedMasterType: !Ref MasterInstanceTypeForMyDomain1
        DedicatedMasterCount: !Ref MasterInstanceCountForMyDomain1
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !Ref VolumeSizeForMyDomain1
        VolumeType: "gp3"
      VPCOptions:
        SubnetIds: !Ref MySubnet1
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedOptions:
        "rest.action.multi.allow_explicit_index": "true"
      LogPublishingOptions:
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/OpenSearch/${DomainNameForMyDomain1}-search-slow"
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/OpenSearch/${DomainNameForMyDomain1}-index-slow"
          Enabled: true
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/OpenSearch/${DomainNameForMyDomain1}-app-logs"
          Enabled: true

  MyServiceFargate1:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: MyServiceFargate1
      Cluster: !Ref MyCluster1
      TaskDefinition: !Ref MyTaskDefinitionFargate1
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref MySubnet1

Outputs: 
  ClusterNameOutputForMyFargateCluster1:
    Description: The name of the created ECS cluster for MyFargateCluster1
    Value: !Ref MyFargateCluster1
  SQSQueueNameForMyQueue1:
    Description: "The name of the SQS queue for MyQueue1."
    Value: !Ref MyQueue1
  SQSQueueURLForMyQueue1:
    Description: "The URL of the SQS queue for MyQueue1."
    Value: !Ref MyQueue1
  SQSQueueARNForMyQueue1:
    Description: "The ARN of the SQS queue for MyQueue1."
    Value: !GetAtt MyQueue1.Arn

  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"


  ClusterNameOutputForMyCluster1:
    Description: The name of the created ECS cluster for MyCluster1
    Value: !Ref MyCluster1
  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1
  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  LambdaFunctionArnForMyFunction2:
    Description: The ARN of the Lambda function for MyFunction2
    Value: !GetAtt MyFunction2.Arn
  LambdaFunctionArnForMyFunction3:
    Description: The ARN of the Lambda function for MyFunction3
    Value: !GetAtt MyFunction3.Arn
  LexBotIdForMyBot1:
    Description: "The ID of the Lex Bot for MyBot1."
    Value: !Ref MyBot1

  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1

  LexBotAliasIdForMyBotAlias1:
    Description: "The ID of the Lex Bot Alias for MyBotAlias1."
    Value: !Ref LexBotAliasForMyBotAlias1

  OpenSearchDomainArnForMyDomain1:
    Description: "The ARN of the OpenSearch Domain"
    Value: !GetAtt MyDomain1.Arn
  OpenSearchDomainEndpointForMyDomain1:
    Description: "The endpoint of the OpenSearch Domain"
    Value: !GetAtt MyDomain1.DomainEndpoint

  ServiceNameForMyServiceFargate1:
    Description: ECS Service Name for MyServiceFargate1
    Value: !Ref MyServiceFargate1

