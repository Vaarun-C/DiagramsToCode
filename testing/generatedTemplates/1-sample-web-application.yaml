AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 1-sample-web-application.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]
  VersioningEnabledForMyBucket2: !Equals [!Ref EnableVersioningForMyBucket2, true]







Parameters: 
  StreamNameForMyStream1:
    Type: String
    Default: "MyStream1"
    Description: "The name of the Kinesis Data Stream for MyStream1."
  ShardCountForMyStream1:
    Type: Number
    Default: 1
    Description: "The number of shards for the Kinesis Data Stream for MyStream1."
  RetentionHoursForMyStream1:
    Type: Number
    Default: 24
    AllowedValues:
      - 24
      - 48
      - 72
      - 168
      - 8760
    Description: "Retention period for data in the stream (in hours) for MyStream1."

  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket2:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket2:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  HostedZoneIdForMyRecordSet1:
    Type: String
    Description: The Route 53 Hosted Zone ID for your domain for MyRecordSet1


  EventBusNameForMyEventBus1:
    Type: String
    Default: "MyEventBus1"
    Description: "Name of the EventBridge Event Bus for MyEventBus1"


  RuleNameForMyRule1:
    Type: String
    Default: "MyRule1"
    Description: "Name of the EventBridge Rule for MyRule1"

  DomainNameForMyDomainName1:
    Type: String
    Description: The domain name to use for the API for MyDomainName1


Resources: 
  MyStream1:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Ref StreamNameForMyStream1
      ShardCount: !Ref ShardCountForMyStream1
      RetentionPeriodHours: !Ref RetentionHoursForMyStream1
      StreamEncryption:
        EncryptionType: "KMS"
        KeyId: "alias/aws/kinesis"  # Default KMS key provided by AWS

  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket2
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket2 
          - Enabled 
          - Suspended
  MyRecordSet1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneIdForMyRecordSet1
      Name: !Ref DomainNameForMyDomainName1
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyDomainName1.RegionalDomainName
        HostedZoneId: !GetAtt MyDomainName1.RegionalHostedZoneId

  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyEventBus1:
    Type: "AWS::Events::EventBus"
    Properties:
      Name: !Ref EventBusNameForMyEventBus1
      Tags:
        - Key: "Environment"
          Value: "Development"

  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyBucketPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket2.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Ref RuleNameForMyRule1
      Description: "Rule to trigger Lambda on specific event patterns for MyRule1"
      EventBusName: !Ref MyEventBus1
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "PutObject"
          resources:
            - !Sub "arn:aws:s3:::${MyBucket1}"
      State: "ENABLED"
      Targets:
        - Id: "LambdaTarget"
          Arn: !GetAtt MyFunction1.Arn

  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyDomainName1:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      RegionalCertificateArn: !Ref MyCertificate1
      EndpointConfiguration:
        Types:
          - REGIONAL

  MyCertificate1:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainNameForMyDomainName1
      ValidationMethod: DNS

Outputs: 
  StreamArnForMyStream1:
    Description: "The ARN of the Kinesis Data Stream For MyStream1"
    Value: !GetAtt MyStream1.Arn
  StreamNameForMyStream1:
    Description: "The name of the Kinesis Data Stream For MyStream1"
    Value: !Ref MyStream1

  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  S3BucketNameForMyBucket2:
    Description: The name of the created S3 bucket for MyBucket2
    Value: !Ref MyBucket2
  S3BucketArnForMyBucket2:
    Description: The ARN of the created S3 bucket for MyBucket2
    Value: !GetAtt MyBucket2.Arn

  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  EventBusArnForMyEventBus1:
    Description: "ARN of the Event Bus for MyEventBus1"
    Value: !GetAtt MyEventBus1.Arn
    Export:
      Name: "EventBusArn"
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"




