AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 6f842774-26a6-48f8-9f9d-a8fc741a9f73.png
Conditions: 





Parameters: 
  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  TargetGroupNameForMyTargetGroup1:
    Type: String
    Default: MyTargetGroup1
    Description: Name for the Target Group for MyTargetGroup1

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ
  LoadBalancerNameForMyLoadBalancer1:
    Type: String
    Default: MyLoadBalancer1
    Description: Name for the Network Load Balancer for MyLoadBalancer1




Resources: 
  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupNameForMyTargetGroup1
      Port: 80
      Protocol: TCP
      VpcId: !Ref MyVPC1
      TargetType: ip

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyLoadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerNameForMyLoadBalancer1
      Scheme: internal
      Type: network
      Subnets: !Ref MySubnet1

  MyVPCEndpointService1:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      AcceptanceRequired: false
      NetworkLoadBalancerArns: 
        - !Ref MyLoadBalancer1

  MyListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup1
      LoadBalancerArn: !Ref MyLoadBalancer1
      Port: 80
      Protocol: TCP

  VPCEndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      ServiceId: !Ref VPCEndpointService
      AllowedPrincipals: 
        - !Sub 'arn:aws:iam::${AWS::AccountId}:root'

Outputs: 
  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1

  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1
  LoadBalancerDNSForMyLoadBalancer1:
    Description: DNS name of the Network Load Balancer for MyLoadBalancer1
    Value: !GetAtt MyLoadBalancer1.DNSName




