AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for Aws-cdk-insurancelake-etl.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]

  VersioningEnabledForMyBucket2: !Equals [!Ref EnableVersioningForMyBucket2, true]
  VersioningEnabledForMyBucket3: !Equals [!Ref EnableVersioningForMyBucket3, true]

  VersioningEnabledForMyBucket4: !Equals [!Ref EnableVersioningForMyBucket4, true]





Parameters: 
  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DatabaseNameForMyDatabase1:
    Type: String
    Default: MyDatabase1
    Description: Name of the Glue database for MyDatabase1

  BucketNameForMyBucket2:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket2:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket3:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket3:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DatabaseNameForMyDatabase2:
    Type: String
    Default: MyDatabase2
    Description: Name of the Glue database for MyDatabase2

  BucketNameForMyBucket4:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket4:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]

  CrawlerScheduleForMyCrawler1:
    Type: String
    Default: "cron(0 12 * * ? *)"
    Description: Cron expression for crawler schedule for MyCrawler1

  JobTimeoutForMyJob1:
    Type: Number
    Default: 2880
    Description: Job timeout in minutes for MyJob1

  CrawlerScheduleForMyCrawler2:
    Type: String
    Default: "cron(0 12 * * ? *)"
    Description: Cron expression for crawler schedule for MyCrawler2

  JobTimeoutForMyJob2:
    Type: Number
    Default: 2880
    Description: Job timeout in minutes for MyJob2

Resources: 
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyDatabase1:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Ref DatabaseNameForMyDatabase1
        Description: "Glue database for storing table metadata for MyDatabase1."

  MyBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket2
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket2 
          - Enabled 
          - Suspended
  MyBucket3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket3
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket3 
          - Enabled 
          - Suspended
  MyDatabase2:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Ref DatabaseNameForMyDatabase2
        Description: "Glue database for storing table metadata for MyDatabase2."

  MyBucket4:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket4
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket4 
          - Enabled 
          - Suspended
  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyRoleForGlueService1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "glue.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GlueServicePolicyForMyRoleForGlueService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource: 
                  - !Sub "arn:aws:s3:::${MyBucket1}"
                  - !Sub "arn:aws:s3:::${MyBucket1}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  MyBucketPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket2.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy3:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket3.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy4:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket4
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket4.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyCrawler1:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt MyRoleForGlueService1.Arn
      DatabaseName: !Ref MyDatabase1
      Name: !Sub "${DatabaseNameForMyDatabase1}-crawler"
      Description: "Crawler to populate the Glue database."
      Targets:
        S3Targets:
          - Path: !Sub "s3://${MyBucket1}/data/"
      Schedule: 
        ScheduleExpression: !Ref CrawlerScheduleForMyCrawler1

  MyJob1:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt MyBucket1.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${MyBucket1}/scripts/MyJob1-script.py"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${MyBucket1}/temp/"
        "--job-bookmark-option": "job-bookmark-enable"
      MaxRetries: 1
      Timeout: !Ref JobTimeoutForMyJob1

  MyCrawler2:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt MyRoleForGlueService1.Arn
      DatabaseName: !Ref MyDatabase2
      Name: !Sub "${DatabaseNameForMyDatabase2}-crawler"
      Description: "Crawler to populate the Glue database."
      Targets:
        S3Targets:
          - Path: !Sub "s3://${MyBucket2}/data/"
      Schedule: 
        ScheduleExpression: !Ref CrawlerScheduleForMyCrawler2

  MyJob2:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt MyBucket2.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${MyBucket2}/scripts/MyJob2-script.py"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${MyBucket2}/temp/"
        "--job-bookmark-option": "job-bookmark-enable"
      MaxRetries: 1
      Timeout: !Ref JobTimeoutForMyJob2

Outputs: 
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  GlueDatabaseName:
    Description: "The name of the Glue database for MyDatabase1"
    Value: !Ref MyDatabase1
  S3BucketNameForMyBucket2:
    Description: The name of the created S3 bucket for MyBucket2
    Value: !Ref MyBucket2
  S3BucketArnForMyBucket2:
    Description: The ARN of the created S3 bucket for MyBucket2
    Value: !GetAtt MyBucket2.Arn
  S3BucketNameForMyBucket3:
    Description: The name of the created S3 bucket for MyBucket3
    Value: !Ref MyBucket3
  S3BucketArnForMyBucket3:
    Description: The ARN of the created S3 bucket for MyBucket3
    Value: !GetAtt MyBucket3.Arn
  GlueDatabaseName:
    Description: "The name of the Glue database for MyDatabase2"
    Value: !Ref MyDatabase2
  S3BucketNameForMyBucket4:
    Description: The name of the created S3 bucket for MyBucket4
    Value: !Ref MyBucket4
  S3BucketArnForMyBucket4:
    Description: The ARN of the created S3 bucket for MyBucket4
    Value: !GetAtt MyBucket4.Arn

  GlueCrawlerNameForMyCrawler1:
    Description: "The name of the Glue crawler for MyCrawler1"
    Value: !Ref MyCrawler1

  GlueJobNameForMyJob1:
    Description: "The name of the Glue job for MyJob1"
    Value: !Ref MyJob1

  GlueCrawlerNameForMyCrawler2:
    Description: "The name of the Glue crawler for MyCrawler2"
    Value: !Ref MyCrawler2

  GlueJobNameForMyJob2:
    Description: "The name of the Glue job for MyJob2"
    Value: !Ref MyJob2

