AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 2-deployment-of-player-related-components-outside-of-aws.png
Conditions: 



Parameters: 
  ClusterNameForMyCluster1:
    Description: The name of the ECS cluster
    Type: String
    Default: MyCluster1
  TaskDefinitionNameForMyTaskDefinition1:
    Description: The name of the ECS task definition
    Type: String
    Default: MyTaskDefinition1
  ContainerNameForMyTaskDefinition1:
    Description: The name of the container
    Type: String
    Default: MyContainerForMyTaskDefinition1
  ContainerImageForMyTaskDefinition1:
    Description: The Docker image to use for the container
    Type: String
    Default: amazon/amazon-ecs-sample
  ContainerPortForMyTaskDefinition1:
    Description: The port on which the container listens
    Type: Number
    Default: 80
  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ

  ClusterNameForMyCluster1:
    Type: String
    Default: "MyCluster1"
    Description: "The name of the MSK cluster for MyCluster1."
  BrokerInstanceTypeForMyCluster1:
    Type: String
    Default: "kafka.m5.large"
    Description: "The instance type for the Kafka brokers for MyCluster1."
  NumberOfBrokerNodesForMyCluster1:
    Type: Number
    Default: 3
    Description: "The number of broker nodes in the cluster for MyCluster1."

  ServiceNameForMyService1:
    Description: The name of the ECS service
    Type: String
    Default: MyService1
  DesiredCountForMyService1:
    Description: The desired number of tasks to run in the service
    Type: Number
    Default: 1
  DBInstanceIdentifierForMyDBSubnetGroup1:
    Description: Unique identifier for the DB instance
    Type: String
    Default: MyDBSubnetGroup1
  DBInstanceClassForMyDBInstance1:
    Description: The compute and memory capacity of the DB instance for MyDBInstance1
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
    ConstraintDescription: Must be a valid DB instance class.
  DBEngineForMyDBInstance1:
    Description: The database engine to use
    Type: String
    Default: MySQL
    AllowedValues:
      - MySQL
      - aurora-postgresql
      - sqlserver-express
      - oracle-se2  
    ConstraintDescription: Must be a valid database engine.
  DBNameForMyDBInstance1:
    Description: The name of the database to create for MyDBInstance1
    Type: String
    Default: mydatabaseForMyDBInstance1
  MasterUsernameForMyDBInstance1:
    Description: The master username for the database for MyDBInstance1
    Type: String
    Default: admin

Resources: 
  MyCluster1:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterNameForMyCluster1
  MyTaskDefinition1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref TaskDefinitionNameForMyTaskDefinition1
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ContainerNameForMyTaskDefinition1
          Image: !Ref ContainerImageForMyTaskDefinition1
          PortMappings:
            - ContainerPort: !Ref ContainerPortForMyTaskDefinition1
          Memory: 512  # Adjust as needed
          Cpu: 256  # Adjust as needed
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyCluster1:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Ref ClusterNameForMyCluster1
      KafkaVersion: "3.4.0" # Choose a supported Kafka version
      NumberOfBrokerNodes: !Ref NumberOfBrokerNodesForMyCluster1
      BrokerNodeGroupInfo:
        BrokerAZDistribution: "DEFAULT"
        ClientSubnets: !Ref MySubnet1
        InstanceType: !Ref BrokerInstanceTypeForMyCluster1
      EncryptionInfo:
        EncryptionAtRest:
          DataVolumeKMSKeyId: "alias/aws/kafka" # Default AWS-managed KMS key
        EncryptionInTransit:
          ClientBroker: "TLS"
          InCluster: true
      LoggingInfo:
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Sub "/aws/msk/${ClusterNameForMyCluster1}"
          S3:
            Enabled: false
          Firehose:
            Enabled: false

  MyService1:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref ServiceNameForMyService1
      Cluster: !Ref MyCluster1
      DesiredCount: !Ref DesiredCountForMyService1
      TaskDefinition: !Ref MyTaskDefinition1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref MySubnet1
          AssignPublicIp: ENABLED  # Change to DISABLED if not needed
  MyDBSubnetGroup1:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      DBSubnetGroupName: !Sub "${DBInstanceIdentifierForMyDBSubnetGroup1}-subnet-group"
      SubnetIds: !Ref MySubnet1
  MyDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifierForMyDBSubnetGroup1
      DBInstanceClass: !Ref DBInstanceClassForMyDBInstance1
      Engine: !Ref DBEngineForMyDBInstance1
      DBName: !Ref DBNameForMyDBInstance1
      MasterUsername: !Ref MasterUsernameForMyDBInstance1
      MasterUserPassword: '{{resolve:secretsmanager:RDS-database-password:SecretString:password}}'
      DBSubnetGroupName: !Ref MyDBSubnetGroup1
      AllocatedStorage: '20'
      StorageType: gp2

Outputs: 
  ClusterNameOutputForMyCluster1:
    Description: The name of the created ECS cluster for MyCluster1
    Value: !Ref MyCluster1
  ClusterNameOutputForMyTaskDefinition1:
    Description: The name of the created ECS cluster for MyTaskDefinition1
    Value: !Ref MyTaskDefinition1
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1
  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1

  ClusterArnForMyCluster1:
    Description: "The ARN of the MSK Cluster for MyCluster1"
    Value: !GetAtt MyCluster1.Arn

  ServiceNameOutputForMyService1:
    Description: The name of the created ECS service for MyService1
    Value: !Ref MyService1
  DBInstanceEndpointForMyDBInstance1:
    Description: The endpoint of the RDS database instance for MyDBInstance1
    Value: !GetAtt MyDBInstance1.Endpoint.Address

