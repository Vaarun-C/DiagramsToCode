AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for investment-analyst-arch.png
Conditions: 
  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]







Parameters: 
  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  InstanceIdForMyDashboard1:
    Type: String
    Description: "The ID of the EC2 instance to monitor for MyDashboard1"


  TopicNameForMyTopic1:
    Type: String
    Default: "MyTopic1Topic"
    Description: "The name of the SNS topic for MyTopic1."
  DisplayNameForMyTopic1:
    Type: String
    Default: "MyTopic1DisplayName"
    Description: "The display name for the SNS topic for MyTopic1."


  AlarmThresholdForMyAlarm1:
    Type: Number
    Default: 70
    Description: "The CPU utilization percentage threshold to trigger the alarm for MyAlarm1"

  EnvironmentForMyTrail1:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - staging
      - prod
    Description: 'Environment name for resource tagging for MyTrail1'


Resources: 
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyDashboard1:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 'MyDashboard1'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${InstanceIdForMyDashboard1}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "EC2 Instance CPU for MyDashboard1"
              }
            }
          ]
        }

  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for CloudTrail log encryption for MyKey1'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'

  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref TopicNameForMyTopic1
      DisplayName: !Ref DisplayNameForMyTopic1

  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUAlarmMyAlarm1
      AlarmDescription: Alarm if CPU exceeds the specified threshold for MyAlarm1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref AlarmThresholdForMyAlarm1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceIdForMyDashboard1
      AlarmActions:
        - !Ref MyTopic1

  MyTrail1:
    Type: AWS::CloudTrail::Trail
    DependsOn: 
      - MyBucketPolicy1
    Properties:
      TrailName: !Sub '${EnvironmentForMyTrail1}-cloudtrail'
      S3BucketName: !Ref MyBucket1
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      KMSKeyId: !GetAtt MyKey1.Arn
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentForMyTrail1

  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
Outputs: 
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  DashboardURLForMyDashboard1:
    Description: 'URL of the CloudWatch Dashboard for MyDashboard1'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=MyDashboard1'
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
  CloudTrailKMSKeyArnForMyKey1:
    Description: 'The ARN of the KMS key used for encrypting CloudTrail logs for MyKey1'
    Value: !GetAtt MyKey1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'
  TopicArnForMyTopic1:
    Description: "The ARN of the SNS topic for MyTopic1."
    Value: !Ref MyTopic1
  TopicNameOutputForMyTopic1:
    Description: "The name of the SNS topic for MyTopic1."
    Value: !Ref TopicNameForMyTopic1
  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  AlarmNameForMyAlarm1:
    Description: 'Name of the CloudWatch Alarm for MyAlarm1'
    Value: !Ref MyAlarm1

  CloudTrailArnForMyTrail1:
    Description: 'The ARN of the CloudTrail for MyTrail1'
    Value: !GetAtt MyTrail1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'


