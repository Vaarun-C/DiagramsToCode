AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for hpc-cluster-monitoring.png
Conditions: 



  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]







Parameters: 
  EventBusNameForMyEventBus1:
    Type: String
    Default: "MyEventBus1"
    Description: "Name of the EventBridge Event Bus for MyEventBus1"

  InstanceIdForMyDashboard1:
    Type: String
    Description: "The ID of the EC2 instance to monitor for MyDashboard1"

  InstanceIdForMyDashboard2:
    Type: String
    Description: "The ID of the EC2 instance to monitor for MyDashboard2"

  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  TopicNameForMyTopic1:
    Type: String
    Default: "MyTopic1Topic"
    Description: "The name of the SNS topic for MyTopic1."
  DisplayNameForMyTopic1:
    Type: String
    Default: "MyTopic1DisplayName"
    Description: "The display name for the SNS topic for MyTopic1."

  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AlarmThresholdForMyAlarm1:
    Type: Number
    Default: 70
    Description: "The CPU utilization percentage threshold to trigger the alarm for MyAlarm1"

  AlarmThresholdForMyAlarm2:
    Type: Number
    Default: 70
    Description: "The CPU utilization percentage threshold to trigger the alarm for MyAlarm2"

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ
  RuleNameForMyRule1:
    Type: String
    Default: "MyRule1"
    Description: "Name of the EventBridge Rule for MyRule1"

  InstanceTypeForMyInstance1:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type for MyInstance1.
  AMIIdForMyInstance1:
    Type: AWS::EC2::Image::Id
    Default: ami-0c02fb55956c7d316
    Description: AMI ID for the EC2 instance for MyInstance1.
  KeyPairNameForMyInstance1:
    Type: String
    Description: Name of an existing EC2 KeyPair for SSH access for MyInstance1.

  InstanceTypeForMyInstance2:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type for MyInstance2.
  AMIIdForMyInstance2:
    Type: AWS::EC2::Image::Id
    Default: ami-0c02fb55956c7d316
    Description: AMI ID for the EC2 instance for MyInstance2.
  KeyPairNameForMyInstance2:
    Type: String
    Description: Name of an existing EC2 KeyPair for SSH access for MyInstance2.

  InstanceTypeForMyInstance3:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type for MyInstance3.
  AMIIdForMyInstance3:
    Type: AWS::EC2::Image::Id
    Default: ami-0c02fb55956c7d316
    Description: AMI ID for the EC2 instance for MyInstance3.
  KeyPairNameForMyInstance3:
    Type: String
    Description: Name of an existing EC2 KeyPair for SSH access for MyInstance3.

Resources: 
  MyEventBus1:
    Type: "AWS::Events::EventBus"
    Properties:
      Name: !Ref EventBusNameForMyEventBus1
      Tags:
        - Key: "Environment"
          Value: "Development"

  MyDashboard1:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 'MyDashboard1'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${InstanceIdForMyDashboard1}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "EC2 Instance CPU for MyDashboard1"
              }
            }
          ]
        }

  MyDashboard2:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 'MyDashboard2'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${InstanceIdForMyDashboard2}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "EC2 Instance CPU for MyDashboard2"
              }
            }
          ]
        }

  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref TopicNameForMyTopic1
      DisplayName: !Ref DisplayNameForMyTopic1

  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUAlarmMyAlarm1
      AlarmDescription: Alarm if CPU exceeds the specified threshold for MyAlarm1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref AlarmThresholdForMyAlarm1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceIdForMyDashboard1
      AlarmActions:
        - !Ref MyTopic1

  MyAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUAlarmMyAlarm2
      AlarmDescription: Alarm if CPU exceeds the specified threshold for MyAlarm2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref AlarmThresholdForMyAlarm2
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceIdForMyDashboard2
      AlarmActions:
        - !Ref MyTopic1

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Ref RuleNameForMyRule1
      Description: "Rule to trigger Lambda on specific event patterns for MyRule1"
      EventBusName: !Ref MyEventBus1
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "PutObject"
          resources:
            - !Sub "arn:aws:s3:::${MyBucket1}"
      State: "ENABLED"
      Targets:
        - Id: "LambdaTarget"
          Arn: !GetAtt MyFunction1.Arn

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeForMyInstance1
      ImageId: !Ref AMIIdForMyInstance1
      KeyName: !Ref KeyPairNameForMyInstance1
      SubnetId: !Ref MySubnet1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Hello, World!" > /var/www/html/index.html
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd

  MyInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeForMyInstance2
      ImageId: !Ref AMIIdForMyInstance2
      KeyName: !Ref KeyPairNameForMyInstance2
      SubnetId: !Ref MySubnet1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Hello, World!" > /var/www/html/index.html
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd

  MyInstance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeForMyInstance3
      ImageId: !Ref AMIIdForMyInstance3
      KeyName: !Ref KeyPairNameForMyInstance3
      SubnetId: !Ref MySubnet1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Hello, World!" > /var/www/html/index.html
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd

Outputs: 
  EventBusArnForMyEventBus1:
    Description: "ARN of the Event Bus for MyEventBus1"
    Value: !GetAtt MyEventBus1.Arn
    Export:
      Name: "EventBusArn"
  DashboardURLForMyDashboard1:
    Description: 'URL of the CloudWatch Dashboard for MyDashboard1'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=MyDashboard1'
  DashboardURLForMyDashboard2:
    Description: 'URL of the CloudWatch Dashboard for MyDashboard2'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=MyDashboard2'
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  TopicArnForMyTopic1:
    Description: "The ARN of the SNS topic for MyTopic1."
    Value: !Ref MyTopic1
  TopicNameOutputForMyTopic1:
    Description: "The name of the SNS topic for MyTopic1."
    Value: !Ref TopicNameForMyTopic1
  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  AlarmNameForMyAlarm1:
    Description: 'Name of the CloudWatch Alarm for MyAlarm1'
    Value: !Ref MyAlarm1

  AlarmNameForMyAlarm2:
    Description: 'Name of the CloudWatch Alarm for MyAlarm2'
    Value: !Ref MyAlarm2

  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1

  InstancePublicIpForMyInstance1:
    Description: Public IP address of the EC2 instance for MyInstance1
    Value: !GetAtt MyInstance1.PublicIp
  InstanceIdForMyInstance1:
    Description: ID of the EC2 instance for MyInstance1
    Value: !Ref MyInstance1

  InstancePublicIpForMyInstance2:
    Description: Public IP address of the EC2 instance for MyInstance2
    Value: !GetAtt MyInstance2.PublicIp
  InstanceIdForMyInstance2:
    Description: ID of the EC2 instance for MyInstance2
    Value: !Ref MyInstance2

  InstancePublicIpForMyInstance3:
    Description: Public IP address of the EC2 instance for MyInstance3
    Value: !GetAtt MyInstance3.PublicIp
  InstanceIdForMyInstance3:
    Description: ID of the EC2 instance for MyInstance3
    Value: !Ref MyInstance3

