AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 5-companion-application.png
Conditions: 








  HasEmailSubscriptionForMySubscription1: !Not [!Equals [!Ref EmailAddressForMySubscription1, ""]]






Parameters: 
  GraphQLApiNameForMyGraphQLApi1:
    Type: String
    Default: "MyGraphQLApi1"
    Description: "The name of the AppSync GraphQL API for MyGraphQLApi1."

  QueueNameForMyQueue1:
    Type: String
    Default: "MyQueue1"
    Description: "The name of the SQS queue for MyQueue1."
  VisibilityTimeoutForMyQueue1:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 43200
    Description: "The visibility timeout for the queue in seconds for MyQueue1."
  MessageRetentionPeriodForMyQueue1:
    Type: Number
    Default: 345600  # 4 days
    MinValue: 60
    MaxValue: 1209600  # 14 days
    Description: "The number of seconds for which Amazon SQS retains a message for MyQueue1."

  DynamoDBTableNameForMyTable1:
    Type: String
    Default: "MyTable1"
    Description: "The name of the DynamoDB table for MyTable1."

  QueueNameForMyQueue2:
    Type: String
    Default: "MyQueue2"
    Description: "The name of the SQS queue for MyQueue2."
  VisibilityTimeoutForMyQueue2:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 43200
    Description: "The visibility timeout for the queue in seconds for MyQueue2."
  MessageRetentionPeriodForMyQueue2:
    Type: Number
    Default: 345600  # 4 days
    MinValue: 60
    MaxValue: 1209600  # 14 days
    Description: "The number of seconds for which Amazon SQS retains a message for MyQueue2."

  TopicNameForMyTopic1:
    Type: String
    Default: "MyTopic1Topic"
    Description: "The name of the SNS topic for MyTopic1."
  DisplayNameForMyTopic1:
    Type: String
    Default: "MyTopic1DisplayName"
    Description: "The display name for the SNS topic for MyTopic1."


  ApiKeyExpiryForMyApiKey1:
    Type: Number
    Description: "Unix timestamp when the API key should expire for MyApiKey1."
    Default: 1700889600


  EmailAddressForMySubscription1:
    Type: String
    Default: ""
    Description: "The email address to subscribe to the topic for MySubscription1. Leave blank if no email subscription is required."






Resources: 
  MyGraphQLApi1:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref GraphQLApiNameForMyGraphQLApi1
      AuthenticationType: API_KEY
      XrayEnabled: true

  MyQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueNameForMyQueue1
      VisibilityTimeout: !Ref VisibilityTimeoutForMyQueue1
      MessageRetentionPeriod: !Ref MessageRetentionPeriodForMyQueue1

  MyTable1:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableNameForMyTable1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  MyQueue2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueNameForMyQueue2
      VisibilityTimeout: !Ref VisibilityTimeoutForMyQueue2
      MessageRetentionPeriod: !Ref MessageRetentionPeriodForMyQueue2

  MyTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref TopicNameForMyTopic1
      DisplayName: !Ref DisplayNameForMyTopic1

  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyGraphQLSchema1:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Definition: |
        type Query {
          getItem(id: ID!): Item
        }
        type Mutation {
          putItem(id: ID!, name: String!): Item
        }
        type Item {
          id: ID!
          name: String
        }
        schema {
          query: Query
          mutation: Mutation
        }

  MyApiKey1:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Expires: !Ref ApiKeyExpiryForMyApiKey1

  MyRoleForAppSyncService1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AppSyncDynamoDBAccessForMyRoleForAppSyncService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt MyTable1.Arn

  MySubscription1:
    Type: "AWS::SNS::Subscription"
    Condition: HasEmailSubscriptionForMySubscription1
    Properties:
      Protocol: "email"
      Endpoint: !Ref EmailAddressForMySubscription1
      TopicArn: !Ref MyTopic1

  MyDistribution1:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: MyRestApi1
          ForwardedValues:
            QueryString: false
          MinTTL: 0
          DefaultTTL: 300
          MaxTTL: 1200
        Origins:
          - Id: MyRestApi1
            DomainName: !Sub "${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction2
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyDataSource1:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      Name: "MyDataSource1"
      Type: "AMAZON_DYNAMODB"
      DynamoDBConfig:
        TableName: !Ref MyTable1
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !GetAtt MyRoleForAppSyncService1.Arn

  MyMethodForCloudfront1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi1
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Hello from API Gateway!"}'
      MethodResponses:
        - StatusCode: 200

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyMethodForLambda2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource2
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction2.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction2
      Principal: apigateway.amazonaws.com
  MyGetResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "getItem"
      TypeName: "Query"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MyPutResolver1:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi1.ApiId
      FieldName: "putItem"
      TypeName: "Mutation"
      DataSourceName: !Ref MyDataSource1
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

Outputs: 
  GraphQLApiUrlForMyGraphQLApi1:
    Description: "The URL endpoint of the AppSync GraphQL API for MyGraphQLApi1"
    Value: !GetAtt MyGraphQLApi1.GraphQLUrl
  SQSQueueNameForMyQueue1:
    Description: "The name of the SQS queue for MyQueue1."
    Value: !Ref MyQueue1
  SQSQueueURLForMyQueue1:
    Description: "The URL of the SQS queue for MyQueue1."
    Value: !Ref MyQueue1
  SQSQueueARNForMyQueue1:
    Description: "The ARN of the SQS queue for MyQueue1."
    Value: !GetAtt MyQueue1.Arn


  SQSQueueNameForMyQueue2:
    Description: "The name of the SQS queue for MyQueue2."
    Value: !Ref MyQueue2
  SQSQueueURLForMyQueue2:
    Description: "The URL of the SQS queue for MyQueue2."
    Value: !Ref MyQueue2
  SQSQueueARNForMyQueue2:
    Description: "The ARN of the SQS queue for MyQueue2."
    Value: !GetAtt MyQueue2.Arn

  TopicArnForMyTopic1:
    Description: "The ARN of the SNS topic for MyTopic1."
    Value: !Ref MyTopic1
  TopicNameOutputForMyTopic1:
    Description: "The name of the SNS topic for MyTopic1."
    Value: !Ref TopicNameForMyTopic1
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"

  ApiKeyForMyApiKey1:
    Description: "The API key for accessing the AppSync API for MyApiKey1"
    Value: !Ref MyApiKey1



  CloudFrontDomainNameForMyDistribution1:
    Description: Domain name of the CloudFront distribution for MyDistribution1
    Value: !GetAtt MyDistribution1.DomainName
  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  LambdaFunctionArnForMyFunction2:
    Description: The ARN of the Lambda function for MyFunction2
    Value: !GetAtt MyFunction2.Arn




