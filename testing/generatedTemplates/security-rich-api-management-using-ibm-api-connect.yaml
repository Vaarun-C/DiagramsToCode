AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for security-rich-api-management-using-ibm-api-connect.png
Conditions: 

  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]






Parameters: 
  ApplicationNameForMyApplication1:
    Type: String
    Description: Name of the Elastic Beanstalk application for MyApplication1

  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]


  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  EnvironmentNameForMyEnvironment1:
    Type: String
    Description: Name of the Elastic Beanstalk environment for MyEnvironment1
  SolutionStackNameForMyEnvironment1:
    Type: String
    Description: Solution stack name for MyEnvironment1
    Default: 64bit Amazon Linux 2 v3.5.4 running Python 3.8

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ
  InstanceTypeForMyInstance1:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type for MyInstance1.
  AMIIdForMyInstance1:
    Type: AWS::EC2::Image::Id
    Default: ami-0c02fb55956c7d316
    Description: AMI ID for the EC2 instance for MyInstance1.
  KeyPairNameForMyInstance1:
    Type: String
    Description: Name of an existing EC2 KeyPair for SSH access for MyInstance1.

  ClusterNameForMyCluster1:
    Type: String
    Description: Name of the EKS cluster for MyCluster1
    Default: MyCluster1
  KubernetesVersionForMyCluster1:
    Type: String
    Description: Kubernetes version for the EKS cluster for MyCluster1
    Default: 1.27


Resources: 
  MyApplication1:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref ApplicationNameForMyApplication1
      Description: Elastic Beanstalk Application for MyApplication1
  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyRoleForEKSCluster1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  MyRoleForEKSNodeGroup1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyEnvironment1:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyApplication1
      EnvironmentName: !Ref EnvironmentNameForMyEnvironment1
      SolutionStackName: !Ref SolutionStackNameForMyEnvironment1
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t2.micro
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced

  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeForMyInstance1
      ImageId: !Ref AMIIdForMyInstance1
      KeyName: !Ref KeyPairNameForMyInstance1
      SubnetId: !Ref MySubnet1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Hello, World!" > /var/www/html/index.html
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd

  MyCluster1:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterNameForMyCluster1
      Version: !Ref KubernetesVersionForMyCluster1
      RoleArn: !GetAtt MyRoleForEKSCluster1.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref MySubnet1

  MyNodegroup1:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyCluster1
      NodeRole: !GetAtt MyRoleForEKSNodeGroup1.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 3
        MaxSize: 5
      Subnets: !Ref MySubnet1

Outputs: 

  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"


  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1
  EnvironmentURLForMyEnvironment1:
    Description: URL of the Elastic Beanstalk Environment for MyEnvironment1
    Value: !GetAtt MyEnvironment1.EndpointURL

  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1
  InstancePublicIpForMyInstance1:
    Description: Public IP address of the EC2 instance for MyInstance1
    Value: !GetAtt MyInstance1.PublicIp
  InstanceIdForMyInstance1:
    Description: ID of the EC2 instance for MyInstance1
    Value: !Ref MyInstance1

  ClusterNameForMyCluster1:
    Description: EKS Cluster Name for MyCluster1
    Value: !Ref MyCluster1
  ClusterEndpointForMyCluster1:
    Description: EKS Cluster Endpoint for MyCluster1
    Value: !GetAtt MyCluster1.Endpoint
  ClusterARNForMyCluster1:
    Description: EKS Cluster ARN for MyCluster1
    Value: !GetAtt MyCluster1.Arn


