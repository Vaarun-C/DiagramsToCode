AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for 1-modernize-core-functions.png
Conditions: 

  VersioningEnabledForMyBucket1: !Equals [!Ref EnableVersioningForMyBucket1, true]
  VersioningEnabledForMyBucket2: !Equals [!Ref EnableVersioningForMyBucket2, true]
  VersioningEnabledForMyBucket3: !Equals [!Ref EnableVersioningForMyBucket3, true]

  VersioningEnabledForMyBucket4: !Equals [!Ref EnableVersioningForMyBucket4, true]











  IsMultiNodeForMyCluster1: !Not [!Equals [!Ref NumberOfNodesForMyCluster1, 1]]

  IsMultiNodeForMyCluster2: !Not [!Equals [!Ref NumberOfNodesForMyCluster2, 1]]




Parameters: 
  InstanceIdForMyDashboard1:
    Type: String
    Description: "The ID of the EC2 instance to monitor for MyDashboard1"

  BucketNameForMyBucket1:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket1:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket2:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket2:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  BucketNameForMyBucket3:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket3:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]
  DatabaseNameForMyDatabase1:
    Type: String
    Default: MyDatabase1
    Description: Name of the Glue database for MyDatabase1

  BucketNameForMyBucket4:
    Description: The name of the S3 bucket
    Type: String
  EnableVersioningForMyBucket4:
    Description: Enable versioning for S3 buckets
    Type: String
    Default: false
    AllowedValues: [true, false]

  ExecutionRoleNameForMyRoleForSageMakerExecution1:
    Type: String
    Default: "MyRoleForSageMakerExecution1"
    Description: "The name of the IAM role for the SageMaker Notebook Instance for MyRoleForSageMakerExecution1."

  TopicNameForMyTopic1:
    Type: String
    Default: "MyTopic1Topic"
    Description: "The name of the SNS topic for MyTopic1."
  DisplayNameForMyTopic1:
    Type: String
    Default: "MyTopic1DisplayName"
    Description: "The display name for the SNS topic for MyTopic1."

  VPCCidrBlockForMyVPC1:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.

  NotebookInstanceNameForMyNotebookInstance1:
    Type: String
    Default: "MyNotebookInstance1"
    Description: "The name of the SageMaker Notebook Instance for MyNotebookInstance1."
  NotebookInstanceTypeForMyNotebookInstance1:
    Type: String
    Default: "ml.t2.medium"
    AllowedValues:
      - "ml.t2.medium"
      - "ml.m5.large"
      - "ml.m5.xlarge"
      - "ml.c5.large"
      - "ml.c5.xlarge"
    Description: "The instance type for the SageMaker Notebook Instance for MyNotebookInstance1."
  RootAccessForMyNotebookInstance1:
    Type: String
    Default: "Disabled"
    AllowedValues:
      - "Enabled"
      - "Disabled"
    Description: "Whether the SageMaker Notebook Instance has root access for MyNotebookInstance1."

  AlarmThresholdForMyAlarm1:
    Type: Number
    Default: 70
    Description: "The CPU utilization percentage threshold to trigger the alarm for MyAlarm1"

  SubnetCidrBlockForMySubnet1:
    Description: The CIDR block for the new subnet
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]{1,3})\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block.
  AvailabilityZoneForMySubnet1:
    Description: The Availability Zone for the subnet
    Type: String
    Default: us-east-1a  # Replace with your desired AZ
  EnvironmentForMyTrail1:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - staging
      - prod
    Description: 'Environment name for resource tagging for MyTrail1'

  CrawlerScheduleForMyCrawler1:
    Type: String
    Default: "cron(0 12 * * ? *)"
    Description: Cron expression for crawler schedule for MyCrawler1

  JobTimeoutForMyJob1:
    Type: Number
    Default: 2880
    Description: Job timeout in minutes for MyJob1



  DBInstanceIdentifierForMyDBSubnetGroup1:
    Description: Unique identifier for the DB instance
    Type: String
    Default: MyDBSubnetGroup1
  ClusterIdentifierForMyCluster1:
    Type: String
    Description: The identifier of the Redshift cluster for MyCluster1
    Default: MyCluster1
  DatabaseNameForMyCluster1:
    Type: String
    Description: The name of the first database to be created when the cluster is created for MyCluster1
    Default: dev
  MasterUsernameForMyCluster1:
    Type: String
    Description: Username for the master user for MyCluster1
    Default: admin
    MinLength: 1
    MaxLength: 128
  NodeTypeForMyCluster1:
    Type: String
    Description: The node type to be provisioned for MyCluster1
    Default: dc2.large
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ra3.xlplus
      - ra3.4xlarge
      - ra3.16xlarge
  NumberOfNodesForMyCluster1:
    Type: Number
    Description: Number of compute nodes in the cluster for MyCluster1
    Default: 2
    MinValue: 1
    MaxValue: 100

  ClusterIdentifierForMyCluster2:
    Type: String
    Description: The identifier of the Redshift cluster for MyCluster2
    Default: MyCluster2
  DatabaseNameForMyCluster2:
    Type: String
    Description: The name of the first database to be created when the cluster is created for MyCluster2
    Default: dev
  MasterUsernameForMyCluster2:
    Type: String
    Description: Username for the master user for MyCluster2
    Default: admin
    MinLength: 1
    MaxLength: 128
  NodeTypeForMyCluster2:
    Type: String
    Description: The node type to be provisioned for MyCluster2
    Default: dc2.large
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ra3.xlplus
      - ra3.4xlarge
      - ra3.16xlarge
  NumberOfNodesForMyCluster2:
    Type: Number
    Description: Number of compute nodes in the cluster for MyCluster2
    Default: 2
    MinValue: 1
    MaxValue: 100

  ReplicationInstanceClassForMyReplicationInstance1:
    Type: String
    Default: 'dms.t3.micro'
    Description: 'The compute and memory capacity of the replication instance for MyReplicationInstance1'
  AllocatedStorageForMyReplicationInstance1:
    Type: Number
    Default: 50
    Description: 'The amount of storage (in gigabytes) to be initially allocated for the replication instance for MyReplicationInstance1'

  DBInstanceClassForMyDBInstance1:
    Description: The compute and memory capacity of the DB instance for MyDBInstance1
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
    ConstraintDescription: Must be a valid DB instance class.
  DBEngineForMyDBInstance1:
    Description: The database engine to use
    Type: String
    Default: MySQL
    AllowedValues:
      - MySQL
      - aurora-postgresql
      - sqlserver-express
      - oracle-se2  
    ConstraintDescription: Must be a valid database engine.
  DBNameForMyDBInstance1:
    Description: The name of the database to create for MyDBInstance1
    Type: String
    Default: mydatabaseForMyDBInstance1
  MasterUsernameForMyDBInstance1:
    Description: The master username for the database for MyDBInstance1
    Type: String
    Default: admin

  SourceEndpointArnForMyReplicationTask1:
    Type: String
    Description: 'The ARN of the source endpoint for MyReplicationTask1'
  TargetEndpointArnForMyReplicationTask1:
    Type: String
    Description: 'The ARN of the target endpoint for MyReplicationTask1'

Resources: 
  MyDashboard1:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 'MyDashboard1'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${InstanceIdForMyDashboard1}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "EC2 Instance CPU for MyDashboard1"
              }
            }
          ]
        }

  MyBucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket1
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket1 
          - Enabled 
          - Suspended
  MyBucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket2
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket2 
          - Enabled 
          - Suspended
  MyBucket3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket3
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket3 
          - Enabled 
          - Suspended
  MyDatabase1:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Ref DatabaseNameForMyDatabase1
        Description: "Glue database for storing table metadata for MyDatabase1."

  MyBucket4:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameForMyBucket4
      VersioningConfiguration:
        Status: !If 
          - VersioningEnabledForMyBucket4 
          - Enabled 
          - Suspended
  MyRestApi1:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyRestApi1
      Description: API for my Lambda function MyRestApi1
  MyRoleForLambda1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionForMyRoleForLambda1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  MyKey1:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for CloudTrail log encryption for MyKey1'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'

  MyRoleForSageMakerExecution1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ExecutionRoleNameForMyRoleForSageMakerExecution1
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "SageMakerNotebookPolicyForMyRoleForSageMakerExecution1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sagemaker:*
                Resource: "*"

  MyTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref TopicNameForMyTopic1
      DisplayName: !Ref DisplayNameForMyTopic1

  MyVPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlockForMyVPC1
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC1
  MyBucketPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket1.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyRoleForGlueService1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "glue.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "GlueServicePolicyForMyRoleForGlueService1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource: 
                  - !Sub "arn:aws:s3:::${MyBucket1}"
                  - !Sub "arn:aws:s3:::${MyBucket1}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  MyBucketPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket2.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy3:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket3.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyBucketPolicy4:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyBucket4
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket4.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "true"
            # Example condition for allowing secure transport only
  MyResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      RestApiId: !Ref MyRestApi1
      PathPart: hello
  MyFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MySimpleFunctionForMyFunction1
      Handler: index.handler
      Role: !GetAtt MyRoleForLambda1.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return {
              'statusCode': 200,
              'body': 'Hello, World!'
            }
      Runtime: python3.9
      Timeout: 10
  MyNotebookInstance1:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Ref NotebookInstanceNameForMyNotebookInstance1
      InstanceType: !Ref NotebookInstanceTypeForMyNotebookInstance1
      RoleArn: !GetAtt MyRoleForSageMakerExecution1.Arn
      RootAccess: !Ref RootAccessForMyNotebookInstance1
      VolumeSizeInGB: 10 # Adjust the volume size as needed
      DirectInternetAccess: "Enabled"

  MyAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUAlarmMyAlarm1
      AlarmDescription: Alarm if CPU exceeds the specified threshold for MyAlarm1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref AlarmThresholdForMyAlarm1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceIdForMyDashboard1
      AlarmActions:
        - !Ref MyTopic1

  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC1
      CidrBlock: !Ref SubnetCidrBlockForMySubnet1
      AvailabilityZone: !Ref AvailabilityZoneForMySubnet1
      MapPublicIpOnLaunch: true  # Set to true if you want instances to have public IPs by default
      Tags:
        - Key: Name
          Value: MySubnet1
  MyTrail1:
    Type: AWS::CloudTrail::Trail
    DependsOn: 
      - MyBucketPolicy1
    Properties:
      TrailName: !Sub '${EnvironmentForMyTrail1}-cloudtrail'
      S3BucketName: !Ref MyBucket1
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      KMSKeyId: !GetAtt MyKey1.Arn
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentForMyTrail1

  MyCrawler1:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt MyRoleForGlueService1.Arn
      DatabaseName: !Ref MyDatabase1
      Name: !Sub "${DatabaseNameForMyDatabase1}-crawler"
      Description: "Crawler to populate the Glue database."
      Targets:
        S3Targets:
          - Path: !Sub "s3://${MyBucket1}/data/"
      Schedule: 
        ScheduleExpression: !Ref CrawlerScheduleForMyCrawler1

  MyJob1:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt MyBucket1.Arn
      Command:
        Name: "glueetl"
        ScriptLocation: !Sub "s3://${MyBucket1}/scripts/MyJob1-script.py"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${MyBucket1}/temp/"
        "--job-bookmark-option": "job-bookmark-enable"
      MaxRetries: 1
      Timeout: !Ref JobTimeoutForMyJob1

  MyMethodForLambda1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref MyRestApi1
      RestApiId: !Ref MyResource1
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction1.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
  MyPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyFunction1
      Principal: apigateway.amazonaws.com
  MyClusterSubnetGroup1:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Subnet group for Redshift cluster for MyClusterSubnetGroup1
      SubnetIds: 
        - !Ref MySubnet1

  MyReplicationSubnetGroup1:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: 'Subnet group for DMS replication instance for MyReplicationSubnetGroup1'
      SubnetIds: 
        - !Ref MySubnet1

  MyDBSubnetGroup1:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      DBSubnetGroupName: !Sub "${DBInstanceIdentifierForMyDBSubnetGroup1}-subnet-group"
      SubnetIds: !Ref MySubnet1
  MyCluster1:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterIdentifier: !Ref ClusterIdentifierForMyCluster1
      DBName: !Ref DatabaseNameForMyCluster1
      MasterUsername: !Ref MasterUsernameForMyCluster1
      NodeType: !Ref NodeTypeForMyCluster1
      NumberOfNodes: !Ref NumberOfNodesForMyCluster1
      ClusterType: !If [IsMultiNodeForMyCluster1, 'multi-node', 'single-node']
      ClusterSubnetGroupName: !Ref MyClusterSubnetGroup1
      PubliclyAccessible: false
      Encrypted: true
      Port: 5439
      IamRoles: []
      ManageMasterPassword: true  # AWS will manage the password

  MyCluster2:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterIdentifier: !Ref ClusterIdentifierForMyCluster2
      DBName: !Ref DatabaseNameForMyCluster2
      MasterUsername: !Ref MasterUsernameForMyCluster2
      NodeType: !Ref NodeTypeForMyCluster2
      NumberOfNodes: !Ref NumberOfNodesForMyCluster2
      ClusterType: !If [IsMultiNodeForMyCluster2, 'multi-node', 'single-node']
      ClusterSubnetGroupName: !Ref MyClusterSubnetGroup1
      PubliclyAccessible: false
      Encrypted: true
      Port: 5439
      IamRoles: []
      ManageMasterPassword: true  # AWS will manage the password

  MyReplicationInstance1:
    Type: AWS::DMS::ReplicationInstance
    Properties:
      ReplicationInstanceClass: !Ref ReplicationInstanceClassForMyReplicationInstance1
      AllocatedStorage: !Ref AllocatedStorageForMyReplicationInstance1
      PubliclyAccessible: false
      MultiAZ: false
      ReplicationSubnetGroupIdentifier: !Ref MyReplicationSubnetGroup1

  MyDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifierForMyDBSubnetGroup1
      DBInstanceClass: !Ref DBInstanceClassForMyDBInstance1
      Engine: !Ref DBEngineForMyDBInstance1
      DBName: !Ref DBNameForMyDBInstance1
      MasterUsername: !Ref MasterUsernameForMyDBInstance1
      MasterUserPassword: '{{resolve:secretsmanager:RDS-database-password:SecretString:password}}'
      DBSubnetGroupName: !Ref MyDBSubnetGroup1
      AllocatedStorage: '20'
      StorageType: gp2

  MyReplicationTask1:
    Type: AWS::DMS::ReplicationTask
    Properties:
      MigrationType: 'full-load-and-cdc'
      ReplicationInstanceArn: !Ref MyReplicationInstance1
      SourceEndpointArn: !Ref SourceEndpointArnForMyReplicationTask1
      TargetEndpointArn: !Ref TargetEndpointArnForMyReplicationTask1
      TableMappings: '{"rules": [{"rule-type": "selection", "rule-id": "1", "rule-name": "1", "object-locator": {"schema-name": "%", "table-name": "%"}, "rule-action": "include"}]}'

Outputs: 
  DashboardURLForMyDashboard1:
    Description: 'URL of the CloudWatch Dashboard for MyDashboard1'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=MyDashboard1'
  S3BucketNameForMyBucket1:
    Description: The name of the created S3 bucket for MyBucket1
    Value: !Ref MyBucket1
  S3BucketArnForMyBucket1:
    Description: The ARN of the created S3 bucket for MyBucket1
    Value: !GetAtt MyBucket1.Arn
  S3BucketNameForMyBucket2:
    Description: The name of the created S3 bucket for MyBucket2
    Value: !Ref MyBucket2
  S3BucketArnForMyBucket2:
    Description: The ARN of the created S3 bucket for MyBucket2
    Value: !GetAtt MyBucket2.Arn
  S3BucketNameForMyBucket3:
    Description: The name of the created S3 bucket for MyBucket3
    Value: !Ref MyBucket3
  S3BucketArnForMyBucket3:
    Description: The ARN of the created S3 bucket for MyBucket3
    Value: !GetAtt MyBucket3.Arn
  GlueDatabaseName:
    Description: "The name of the Glue database for MyDatabase1"
    Value: !Ref MyDatabase1
  S3BucketNameForMyBucket4:
    Description: The name of the created S3 bucket for MyBucket4
    Value: !Ref MyBucket4
  S3BucketArnForMyBucket4:
    Description: The ARN of the created S3 bucket for MyBucket4
    Value: !GetAtt MyBucket4.Arn
  ApiUrlForMyRestApi1:
    Description: URL for the API Gateway for MyRestApi1
    Value: !Sub "https://${MyRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
  CloudTrailKMSKeyArnForMyKey1:
    Description: 'The ARN of the KMS key used for encrypting CloudTrail logs for MyKey1'
    Value: !GetAtt MyKey1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'
  ExecutionRoleArnForMyRoleForSageMakerExecution1:
    Description: "The ARN of the SageMaker Notebook execution role for MyRoleForSageMakerExecution1."
    Value: !GetAtt MyRoleForSageMakerExecution1.Arn
  TopicArnForMyTopic1:
    Description: "The ARN of the SNS topic for MyTopic1."
    Value: !Ref MyTopic1
  TopicNameOutputForMyTopic1:
    Description: "The name of the SNS topic for MyTopic1."
    Value: !Ref TopicNameForMyTopic1
  VPCId:
    Description: The ID of the created VPC for MyVPC1
    Value: !Ref MyVPC1

  LambdaFunctionArnForMyFunction1:
    Description: The ARN of the Lambda function for MyFunction1
    Value: !GetAtt MyFunction1.Arn
  NotebookInstanceNameForMyNotebookInstance1:
    Description: "The name of the SageMaker Notebook Instance for MyNotebookInstance1."
    Value: !Ref MyNotebookInstance1
  NotebookInstanceUrlForMyNotebookInstance1:
    Description: "The URL to access the SageMaker Notebook Instance."
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstanceNameForMyNotebookInstance1}"

  AlarmNameForMyAlarm1:
    Description: 'Name of the CloudWatch Alarm for MyAlarm1'
    Value: !Ref MyAlarm1

  SubnetId:
    Description: The ID of the created subnet for MySubnet1
    Value: !Ref MySubnet1
  CloudTrailArnForMyTrail1:
    Description: 'The ARN of the CloudTrail for MyTrail1'
    Value: !GetAtt MyTrail1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'

  GlueCrawlerNameForMyCrawler1:
    Description: "The name of the Glue crawler for MyCrawler1"
    Value: !Ref MyCrawler1

  GlueJobNameForMyJob1:
    Description: "The name of the Glue job for MyJob1"
    Value: !Ref MyJob1



  RedshiftClusterEndpointForMyCluster1:
    Description: Endpoint for Redshift cluster for MyCluster1
    Value: !Sub '${MyCluster1.Endpoint.Address}:${MyCluster1.Endpoint.Port}'

  RedshiftClusterEndpointForMyCluster2:
    Description: Endpoint for Redshift cluster for MyCluster2
    Value: !Sub '${MyCluster2.Endpoint.Address}:${MyCluster2.Endpoint.Port}'

  ReplicationInstanceArnForMyReplicationInstance1:
    Description: 'ARN of the DMS Replication Instance for MyReplicationInstance1'
    Value: !Ref MyReplicationInstance1

  DBInstanceEndpointForMyDBInstance1:
    Description: The endpoint of the RDS database instance for MyDBInstance1
    Value: !GetAtt MyDBInstance1.Endpoint.Address

  ReplicationTaskArnForMyReplicationTask1:
    Description: 'ARN of the DMS Replication Task for MyReplicationTask1'
    Value: !Ref MyReplicationTask1

